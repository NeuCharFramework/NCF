# 触发器：只在推送到 master 分支时自动构建
trigger:
- master

# PR 触发：只有 PR 到 master 分支时才构建和创建 GitHub Release
pr:
- master

# 使用自托管代理池，加快 CI/CD 速度
pool:
  name: 'SenparcOpenSource'

variables:
  - group: NcfGitHubTokenVariableGroup
  - name: solution
    value: '**/NCF.sln'
  - name: templateBuild
    value: '**/NCF.Template.sln'
  - name: webProject
    value: 'src/back-end/Senparc.Web/Senparc.Web.csproj'
  - name: buildConfiguration
    value: 'Release'
  - name: NUGET_PACKAGES
    value: $(Agent.ToolsDirectory)/nuget/packages
  - name: buildId
    value: '$(Build.BuildId)'

jobs:
- job: BuildAndRelease
  pool:
    name: 'SenparcOpenSource'
  steps:
    # 🔧 设置版本号 (读取 PackageVersion + BuildId)
    - task: PowerShell@2
      displayName: 'Set Version from PackageVersion'
      inputs:
        targetType: 'inline'
        script: |
          # 读取 NCF.Template.csproj 中的 PackageVersion
          $csprojPath = "src/NCF.Template.csproj"
          
          if (Test-Path $csprojPath) {
              Write-Host "Reading PackageVersion from: $csprojPath"
              [xml]$csproj = Get-Content $csprojPath
              
              # 使用 XPath 选择第一个 PackageVersion 节点，避免数组问题
              $packageVersionNode = $csproj.SelectSingleNode("//PackageVersion")
              
              if ($packageVersionNode -and $packageVersionNode.InnerText) {
                  $packageVersion = $packageVersionNode.InnerText.Trim()
                  Write-Host "Found PackageVersion: $packageVersion"
                  
                  # 构建版本字符串
                  $buildId = "$(buildId)".Trim()
                  $fullVersion = "v$packageVersion-build$buildId"
                  $fileVersion = "$packageVersion-build$buildId"  # 用于文件名，不含 'v' 前缀
                  
                  Write-Host "Debug: packageVersion = '$packageVersion'"
                  Write-Host "Debug: buildId = '$buildId'"
                  Write-Host "Setting full version: $fullVersion"
                  Write-Host "Setting file version: $fileVersion"
                  
                  # 设置 pipeline 变量 (使用专用前缀避免与系统变量冲突)
                  Write-Host "##vso[task.setvariable variable=githubReleaseTag]$fullVersion"
                  Write-Host "##vso[task.setvariable variable=githubFileVersion]$fileVersion"
                  Write-Host "##vso[task.setvariable variable=ncfPackageVersion]$packageVersion"
                  
                  # 显示版本信息
                  Write-Host ""
                  Write-Host "=== Version Information ==="
                  Write-Host "Build ID: $buildId"
                  Write-Host "Package Version: $packageVersion"
                  Write-Host "Full Version Tag: $fullVersion"
                  Write-Host "File Version: $fileVersion"
                  Write-Host "=========================="
              } else {
                  Write-Host "❌ PackageVersion not found in $csprojPath"
                  # 备用方案：使用构建ID
                  $buildId = "$(buildId)".Trim()
                  $fallbackVersion = "v1.0.0-build$buildId"
                  $fallbackFileVersion = "1.0.0-build$buildId"
                  $fallbackPackageVersion = "1.0.0"
                  
                  Write-Host "Using fallback version: $fallbackVersion"
                  Write-Host "##vso[task.setvariable variable=githubReleaseTag]$fallbackVersion"
                  Write-Host "##vso[task.setvariable variable=githubFileVersion]$fallbackFileVersion"
                  Write-Host "##vso[task.setvariable variable=ncfPackageVersion]$fallbackPackageVersion"
                  
                  # 显示版本信息
                  Write-Host ""
                  Write-Host "=== Version Information (Fallback) ==="
                  Write-Host "Build ID: $buildId"
                  Write-Host "Package Version: $fallbackPackageVersion"
                  Write-Host "Full Version Tag: $fallbackVersion"
                  Write-Host "File Version: $fallbackFileVersion"
                  Write-Host "=========================="
              }
          } else {
              Write-Host "❌ File not found: $csprojPath"
              # 备用方案：使用构建ID
              $buildId = "$(buildId)".Trim()
              $fallbackVersion = "v1.0.0-build$buildId"
              $fallbackFileVersion = "1.0.0-build$buildId"
              $fallbackPackageVersion = "1.0.0"
              
              Write-Host "Using fallback version: $fallbackVersion"
              Write-Host "##vso[task.setvariable variable=githubReleaseTag]$fallbackVersion"
              Write-Host "##vso[task.setvariable variable=githubFileVersion]$fallbackFileVersion"
              Write-Host "##vso[task.setvariable variable=ncfPackageVersion]$fallbackPackageVersion"
              
              # 显示版本信息
              Write-Host ""
              Write-Host "=== Version Information (File Not Found) ==="
              Write-Host "Build ID: $buildId"
              Write-Host "Package Version: $fallbackPackageVersion"
              Write-Host "Full Version Tag: $fallbackVersion"
              Write-Host "File Version: $fallbackFileVersion"
              Write-Host "=========================="
          }


    # 🔧 验证 GitHub CLI
    - task: PowerShell@2
      displayName: 'Verify GitHub CLI'
      inputs:
        targetType: 'inline'
        script: |
          # 尝试多种方式查找和验证 GitHub CLI
          try {
              Write-Host "Attempting to verify GitHub CLI installation..."
              
              # 方法1: 直接调用 gh
              $ghVersion = gh --version 2>$null
              if ($ghVersion) {
                  Write-Host "✅ GitHub CLI found and working:"
                  Write-Host $ghVersion
              } else {
                  throw "Direct gh command failed"
              }
          } catch {
              try {
                  # 方法2: 尝试常见安装路径
                  $commonPaths = @(
                      "${env:ProgramFiles}\GitHub CLI\gh.exe",
                      "${env:ProgramFiles(x86)}\GitHub CLI\gh.exe",
                      "${env:LOCALAPPDATA}\Programs\GitHub CLI\gh.exe",
                      "C:\Program Files\GitHub CLI\gh.exe",
                      "C:\Program Files (x86)\GitHub CLI\gh.exe"
                  )
                  
                  $foundPath = $null
                  foreach ($path in $commonPaths) {
                      if (Test-Path $path) {
                          $foundPath = $path
                          break
                      }
                  }
                  
                  if ($foundPath) {
                      Write-Host "✅ Found GitHub CLI at: $foundPath"
                      & "$foundPath" --version
                      # 添加到 PATH
                      $dirPath = Split-Path $foundPath -Parent
                      Write-Host "##vso[task.setvariable variable=PATH]${env:PATH};$dirPath"
                  } else {
                      Write-Host "❌ GitHub CLI not found in common locations"
                      Write-Host "Available paths checked:"
                      $commonPaths | ForEach-Object { Write-Host "  - $_" }
                      throw "GitHub CLI not found"
                  }
              } catch {
                  Write-Host "⚠️  GitHub CLI verification failed, but continuing..."
                  Write-Host "##vso[task.logissue type=warning]GitHub CLI verification failed but build continues"
              }
          }

    # 🔧 设置环境变量
    - task: PowerShell@2
      displayName: 'Setup Environment'
      inputs:
        targetType: 'inline'
        script: |
          # 设置 GitHub token
          $env:GH_TOKEN = "$(GH_TOKEN)"
          Write-Host "##vso[task.setvariable variable=GH_TOKEN;issecret=true]$(GH_TOKEN)"
          
          # 验证 GitHub 认证
          gh auth status

    # ===================================================================
    # 🚀 发布流程开始 (优先级顺序执行)
    # 1️⃣ 多平台构建 → 2️⃣ GitHub Release → 3️⃣ NuGet 发布 → 4️⃣ Web 站点发布
    # ===================================================================

    # ✅ 多平台构建 (为 GitHub Release 准备构建产物)
    - task: PowerShell@2
      displayName: '🔨 Build Multiple Platforms (Prepare for Release)'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Publishing Windows x64 platform"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime win-x64 --output $(Build.ArtifactStagingDirectory)/win-x64

          Write-Host "Publishing Windows ARM64 platform (Surface Pro X, etc.)"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime win-arm64 --output $(Build.ArtifactStagingDirectory)/win-arm64

          Write-Host "Publishing Linux x64 platform"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime linux-x64 --output $(Build.ArtifactStagingDirectory)/linux-x64

          Write-Host "Publishing Linux ARM64 platform"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime linux-arm64 --output $(Build.ArtifactStagingDirectory)/linux-arm64

          Write-Host "Publishing macOS x64 platform (Intel/Rosetta)"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime osx-x64 --output $(Build.ArtifactStagingDirectory)/osx-x64

          Write-Host "Publishing macOS ARM64 platform (Apple Silicon)"
          dotnet publish $(webProject) --configuration $(buildConfiguration) --runtime osx-arm64 --output $(Build.ArtifactStagingDirectory)/osx-arm64

    # 🟢 缓存 NuGet 及依赖项
    - task: Cache@2
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/*.csproj'
        path: '$(NUGET_PACKAGES)'
        restoreKeys: 'nuget'
      displayName: 'Cache NuGet Packages'

    # 🟢 缓存 Aspire Workload
    - task: Cache@2
      inputs:
        key: 'aspire-workload | "$(Agent.OS)"'
        path: '~/.dotnet'
        restoreKeys: 'aspire-workload'
      displayName: 'Cache Aspire Workload'

    # 🟢 缓存 NuGet 工具
    - task: Cache@2
      inputs:
        key: 'nuget-tool | "$(Agent.OS)"'
        path: 'C:\ProgramData\nuget'
        restoreKeys: 'nuget-tool'
      displayName: 'Cache NuGet Tool'

    # ✅ 仅当缓存未命中时安装 Aspire Workload
    - script: |
        dotnet workload list | findstr /C:"aspire" || dotnet workload install aspire
      displayName: 'Check & Install Aspire Workload'
      condition: ne(variables['CACHE_RESTORED'], 'true')

    # ✅ 使用缓存的 NuGet 版本
    - task: NuGetToolInstaller@1
      displayName: 'Use Cached NuGet 6.3.0'
      inputs:
        versionSpec: '6.3.0'

    - script: |
        nuget sources remove -name nuget.org
      displayName: 'Remove Existing NuGet Source'

    - script: |
        dotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org
      displayName: 'Add NuGet Source'

    # ✅ 恢复 NuGet 依赖
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    # ✅ 解决方案构建
    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: 'Any CPU'
        configuration: '$(buildConfiguration)'

    # ✅ 恢复 Template 依赖
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(templateBuild)'

    # ✅ 构建 Template 解决方案
    - task: VSBuild@1
      inputs:
        solution: '$(templateBuild)'
        msbuildArgs: ''
        platform: 'Any CPU'
        configuration: '$(buildConfiguration)'

    # 🔍 调试构建信息
    - task: PowerShell@2
      displayName: 'Debug Build Information'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "=== Build Debug Information ==="
          Write-Host "Build.Reason: $(Build.Reason)"
          Write-Host "Build.SourceBranch: $(Build.SourceBranch)"
          Write-Host "System.PullRequest.TargetBranch: $(System.PullRequest.TargetBranch)"
          Write-Host "System.PullRequest.SourceBranch: $(System.PullRequest.SourceBranch)"
          Write-Host "System.PullRequest.PullRequestId: $(System.PullRequest.PullRequestId)"
          Write-Host "=============================="

    # 🚀 创建 GitHub Release (发布流程第2步：优先执行，在 Web 站点发布之前)
    - task: PowerShell@2
      displayName: '🚀 Create GitHub Release (Priority Step)'
      inputs:
        targetType: 'inline'
        script: |
          try {
              Write-Host "=== GitHub Release Debug ==="
              Write-Host "githubReleaseTag: $(githubReleaseTag)"
              Write-Host "githubFileVersion: $(githubFileVersion)"
              Write-Host "ncfPackageVersion: $(ncfPackageVersion)"
              Write-Host "=========================="
              
              Write-Host "Creating GitHub Release version $(githubReleaseTag)"
              
              # 确保 GitHub CLI 可用
              try {
                  $ghVersion = gh --version 2>$null
                  if ($ghVersion) {
                      Write-Host "Using GitHub CLI: $ghVersion"
                  } else {
                      throw "GitHub CLI not accessible"
                  }
              } catch {
                  Write-Host "⚠️ GitHub CLI not found, attempting to locate..."
                  $commonPaths = @(
                      "${env:ProgramFiles}\GitHub CLI\gh.exe",
                      "${env:ProgramFiles(x86)}\GitHub CLI\gh.exe",
                      "C:\Program Files\GitHub CLI\gh.exe"
                  )
                  
                  $ghPath = $null
                  foreach ($path in $commonPaths) {
                      if (Test-Path $path) {
                          $ghPath = $path
                          break
                      }
                  }
                  
                  if ($ghPath) {
                      Write-Host "Found GitHub CLI at: $ghPath"
                      Set-Alias -Name gh -Value $ghPath -Scope Global
                  } else {
                      throw "GitHub CLI not found in any common location"
                  }
              }
              
              # 添加 macOS 启动脚本到发布包
              Write-Host "Adding macOS startup script to release packages..."
              if (Test-Path "start-ncf-macos.sh") {
                  Copy-Item "start-ncf-macos.sh" -Destination "$(Build.ArtifactStagingDirectory)/osx-x64/start-ncf-macos.sh" -Force
                  Copy-Item "start-ncf-macos.sh" -Destination "$(Build.ArtifactStagingDirectory)/osx-arm64/start-ncf-macos.sh" -Force
                  Write-Host "✅ macOS startup script added to both macOS packages"
              } else {
                  Write-Host "⚠️  Warning: start-ncf-macos.sh not found in source directory"
              }

              # 添加 macOS 使用指南
              if (Test-Path "MACOS_USAGE_GUIDE.md") {
                  Copy-Item "MACOS_USAGE_GUIDE.md" -Destination "$(Build.ArtifactStagingDirectory)/osx-x64/MACOS_USAGE_GUIDE.md" -Force
                  Copy-Item "MACOS_USAGE_GUIDE.md" -Destination "$(Build.ArtifactStagingDirectory)/osx-arm64/MACOS_USAGE_GUIDE.md" -Force
                  Write-Host "✅ macOS usage guide added to both macOS packages"
              }

              # 压缩发布文件以减少asset数量
              Write-Host "Compressing release files..."
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/win-x64/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-win-x64-$(githubFileVersion).zip" -Force
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/win-arm64/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-win-arm64-$(githubFileVersion).zip" -Force
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/linux-x64/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-linux-x64-$(githubFileVersion).zip" -Force
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/linux-arm64/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-linux-arm64-$(githubFileVersion).zip" -Force
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/osx-x64/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-osx-x64-$(githubFileVersion).zip" -Force
              Compress-Archive -Path "$(Build.ArtifactStagingDirectory)/osx-arm64/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/ncf-osx-arm64-$(githubFileVersion).zip" -Force
              
              # 验证文件存在
              $assetFiles = @(
                  "$(Build.ArtifactStagingDirectory)/ncf-win-x64-$(githubFileVersion).zip",
                  "$(Build.ArtifactStagingDirectory)/ncf-win-arm64-$(githubFileVersion).zip",
                  "$(Build.ArtifactStagingDirectory)/ncf-linux-x64-$(githubFileVersion).zip",
                  "$(Build.ArtifactStagingDirectory)/ncf-linux-arm64-$(githubFileVersion).zip",
                  "$(Build.ArtifactStagingDirectory)/ncf-osx-x64-$(githubFileVersion).zip",
                  "$(Build.ArtifactStagingDirectory)/ncf-osx-arm64-$(githubFileVersion).zip"
              )
              
              foreach ($file in $assetFiles) {
                  if (Test-Path $file) {
                      $size = (Get-Item $file).Length / 1MB
                      Write-Host "✅ Asset ready: $(Split-Path $file -Leaf) ($([math]::Round($size, 2)) MB)"
                  } else {
                      Write-Host "❌ Missing asset: $file"
                  }
              }
              
              # 创建 release
              $releaseNotes = @"
          ## 🚀 NCF Release $(githubReleaseTag)
          
          ### 📋 版本信息
          - **Package Version**: $(ncfPackageVersion)
          - **Build ID**: $(buildId)
          - **Full Version**: $(githubReleaseTag)
          
          ### 📦 平台支持
          - **Windows x64** - 适用于传统 Windows 10/11 (Intel/AMD 64位)
          - **Windows ARM64** - 适用于 Surface Pro X, Surface Laptop 5/6 等 ARM 架构设备
          - **Linux x64** - 适用于 Linux (Intel/AMD 64位)
          - **Linux ARM64** - 适用于 Linux (ARM64，如树莓派4+)
          - **macOS x64** - 适用于 Intel Mac 或 Apple Silicon Mac (通过 Rosetta 2)
          - **macOS ARM64** - 适用于 Apple Silicon Mac (M1/M2/M3/M4 原生)
          
          ### 📋 使用指南
          **Windows 用户请注意**：
          - 大部分 Windows 设备使用 \`ncf-win-x64-$(githubFileVersion).zip\`
          - Surface Pro X 等 ARM 设备使用 \`ncf-win-arm64-$(githubFileVersion).zip\`
          
          **macOS 用户请注意**：
          - M1/M2/M3/M4 Mac 用户推荐下载 \`ncf-osx-arm64-$(githubFileVersion).zip\` (原生性能更好)
          - Intel Mac 用户下载 \`ncf-osx-x64-$(githubFileVersion).zip\`
          - **🆕 新功能**：包含自动化启动脚本 \`start-ncf-macos.sh\`
            - 自动处理 macOS 安全权限问题
            - 自动创建数据库目录
            - 一键启动：\`./start-ncf-macos.sh\`
          - 手动启动：解压后需要给予执行权限：\`chmod +x Senparc.Web\`
          - 详细说明请查看 \`MACOS_USAGE_GUIDE.md\`
          
          ### 📅 构建信息
          - 构建号: $(Build.BuildNumber)
          - 源分支: $(Build.SourceBranchName)
          - 提交: $(Build.SourceVersion)
          - 发布时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
          
          ### 📋 变更
          本版本基于 NCF Template v$(ncfPackageVersion)，详细变更请查看：
          - [PackageReleaseNotes](https://github.com/NeuCharFramework/NCF/blob/master/src/NCF.Template.csproj)
          - [提交历史](https://github.com/NeuCharFramework/NCF/commits/$(Build.SourceBranchName))
          "@
              
              Write-Host "Creating GitHub Release..."
              gh release create "$(githubReleaseTag)" `
                  --target "$(Build.SourceVersion)" `
                  --title "NCF Release $(githubReleaseTag)" `
                  --notes $releaseNotes `
                  "$(Build.ArtifactStagingDirectory)/ncf-win-x64-$(githubFileVersion).zip" `
                  "$(Build.ArtifactStagingDirectory)/ncf-win-arm64-$(githubFileVersion).zip" `
                  "$(Build.ArtifactStagingDirectory)/ncf-linux-x64-$(githubFileVersion).zip" `
                  "$(Build.ArtifactStagingDirectory)/ncf-linux-arm64-$(githubFileVersion).zip" `
                  "$(Build.ArtifactStagingDirectory)/ncf-osx-x64-$(githubFileVersion).zip" `
                  "$(Build.ArtifactStagingDirectory)/ncf-osx-arm64-$(githubFileVersion).zip"
                  
              Write-Host "✅ GitHub Release created successfully"
          } catch {
              Write-Host "❌ Failed to create GitHub Release: $_"
              Write-Host "##vso[task.logissue type=warning]GitHub Release creation failed but build continues"
          }
      env:
        GH_TOKEN: $(GH_TOKEN)
      # 只在 Pull Request 到 master 分支时创建 GitHub Release  
      # 支持: PullRequest 或 手动触发的 PR 构建 (IndividualCI)
      condition: and(succeeded(), or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Reason'], 'IndividualCI')))

    # ✅ 推送 NuGet 包 (发布流程第3步：在 GitHub Release 之后执行)
    - task: NuGetCommand@2
      displayName: '📦 Push NuGet Package (Step 3)'
      inputs:
        command: push
        packagesToPush: '**/Senparc.NCF.Template.*.nupkg'
        nuGetFeedType: external
        publishFeedCredentials: 'nuget-jeffrey-full-key'
      continueOnError: true
      condition: succeededOrFailed()

    # ✅ 发布构建产物 (发布流程第4步：Web 站点发布 - 最终步骤)
    - task: PublishBuildArtifacts@1
      displayName: '🌐 Publish Web Artifacts (Step 4 - Final)'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'sample'